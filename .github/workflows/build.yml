name: Build Datavyu

on:
  push:
    branches: [ main, master ]
  pull_request:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-13, windows-latest]

    env:
      MAVEN_FLAGS: "-B -ntp"
      MAVEN_OPTS: >-
        -Xmx2g
        -Dfile.encoding=UTF-8
        -Dswing.aatext=true
        -Dawt.useSystemAAFontSettings=lcd
        -Dorg.apache.maven.wagon.httpconnectionManager.ttl=120000
        -Dorg.apache.maven.wagon.http.retryHandler.count=2
      APP_MAIN: "org.datavyu.Datavyu"
      APP_NAME: "Datavyu"
      APP_VENDOR: "Datavyu"

    steps:
      - uses: actions/checkout@v4

      # ============= JavaFX 打包所需的 JDK8 + FX（带 javapackager） =============
      - name: Set up JDK 8 (Liberica with JavaFX)
        uses: actions/setup-java@v4
        with:
          distribution: liberica
          java-version: '8'
          java-package: jdk+fx
          cache: maven

      - name: Verify JavaFX packager tools
        shell: bash
        run: |
          set -e
          java -version
          echo "JAVA_HOME=$JAVA_HOME"
          test -x "$JAVA_HOME/bin/javapackager" && echo "✔ javapackager OK" || (echo "✘ javapackager MISSING" && exit 1)
          test -f "$JAVA_HOME/lib/ant-javafx.jar" && echo "✔ ant-javafx.jar OK" || (echo "✘ ant-javafx.jar MISSING" && exit 1)

      # ============================== Windows 打包工具 ==============================
      - name: Install Windows packaging tools (InnoSetup + WiX)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          choco install -y innosetup wixtoolset

      # ============================== Maven 镜像加速 ==============================
      - name: Set up Maven mirrors
        shell: bash
        run: |
          mkdir -p "$HOME/.m2"
          cat > "$HOME/.m2/settings.xml" <<'XML'
          <settings xmlns="http://maven.apache.org/SETTINGS/1.0.0"
                    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                    xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0 https://maven.apache.org/xsd/settings-1.0.0.xsd">
            <mirrors>
              <mirror>
                <id>aliyun-central</id>
                <mirrorOf>central,!apache-central</mirrorOf>
                <url>https://maven.aliyun.com/repository/central</url>
              </mirror>
              <mirror>
                <id>fast-fail-others</id>
                <mirrorOf>rubygems-releases,bintray-datavyu-datavyu</mirrorOf>
                <url>https://repo.maven.apache.org/maven2</url>
              </mirror>
            </mirrors>
            <profiles>
              <profile>
                <id>extra-repos</id>
                <activation><activeByDefault>true</activeByDefault></activation>
                <repositories>
                  <repository>
                    <id>apache-central</id>
                    <url>https://repo.maven.apache.org/maven2</url>
                    <releases><enabled>true</enabled><updatePolicy>never</updatePolicy></releases>
                    <snapshots><enabled>false</enabled></snapshots>
                  </repository>
                </repositories>
              </profile>
            </profiles>
          </settings>
          XML

      # ===================== 预装 vendor/ 下的私有 JAR（可选） =====================
      - name: Preinstall vendor jars (optional)
        shell: bash
        run: |
          set -e
          CLASSIFIER=""
          if [ "$RUNNER_OS" = "macOS" ]; then CLASSIFIER="mac"; fi
          if [ "$RUNNER_OS" = "Windows" ]; then CLASSIFIER="win"; fi

          for f in vendor/sdl-libs-2.0.9-${CLASSIFIER}.jar \
                   vendor/ffmpeg-libs-4.1.1-${CLASSIFIER}.jar \
                   vendor/ffmpeg-plugin-0.24-${CLASSIFIER}.jar ; do
            if [ -f "$f" ]; then
              AID=$(basename "$f" | sed -E 's/-[0-9].*//')
              VER=$(basename "$f" | sed -E 's/.*-([0-9][^.]*(\.[0-9]+)*)[^/]*\.jar/\1/')
              mvn -s "$HOME/.m2/settings.xml" -B install:install-file \
                -Dfile="$f" -DgroupId=org.datavyu -DartifactId="$AID" \
                -Dversion="$VER" -Dpackaging=jar -Dclassifier="${CLASSIFIER}"
            fi
          done

          # mac 独有的 quaqua
          if [ "$RUNNER_OS" = "macOS" ]; then
            if [ -f vendor/quaqua-osx64-7.0.1.jar ]; then
              mvn -s "$HOME/.m2/settings.xml" -B install:install-file \
                -Dfile=vendor/quaqua-osx64-7.0.1.jar \
                -DgroupId=org.datavyu -DartifactId=quaqua-osx64 \
                -Dversion=7.0.1 -Dpackaging=jar
            fi
            if [ -f vendor/quaqua-filechooser-only-7.0.1.jar ]; then
              mvn -s "$HOME/.m2/settings.xml" -B install:install-file \
                -Dfile=vendor/quaqua-filechooser-only-7.0.1.jar \
                -DgroupId=org.datavyu -DartifactId=quaqua-filechooser-only \
                -Dversion=7.0.1 -Dpackaging=jar
            fi
          fi

      # ======================== 复制测试资源到工作目录 ========================
      # 你的测试用的是相对路径 IO/simple*.csv|opf，所以需要把 IO 放到工作目录
      - name: Prepare test resources for file-path based tests
        shell: bash
        run: |
          set -e
          rm -rf IO
          if [ -d src/test/resources/IO ]; then
            mkdir -p IO
            cp -R src/test/resources/IO/* IO/
            echo "Copied test IO/* files to working directory:"
            ls -la IO || true
          else
            echo "src/test/resources/IO not found (this would break file-path based tests)."
            exit 1
          fi

      # ============================== 跑测试（独立阶段） ==============================
      - name: Run unit tests
        shell: bash
        run: |
          set -e
          mvn -s "$HOME/.m2/settings.xml" $MAVEN_FLAGS -U test

      # 测试失败时上传报告，便于排查
      - name: Upload surefire reports (on failure)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: surefire-reports-${{ runner.os }}
          path: target/surefire-reports/**
          if-no-files-found: ignore

      # ======================= 先产出 JavaFX appdir（无测试） =======================
      - name: Build appdir (skip tests)
        shell: bash
        run: |
          set -e
          mvn -s "$HOME/.m2/settings.xml" $MAVEN_FLAGS \
            -DskipTests -Dmaven.test.skip=true -Dtest.skip=true \
            -U clean jfx:jar

      # 先验证 JavaFX 工具是否齐全（保留你已有的 Setup Java 步骤）
      - name: Verify JavaFX tools
        if: runner.os == 'macOS'
        shell: bash
        run: |
          set -euo pipefail
          echo "JAVA_HOME=$JAVA_HOME"
          java -version
          # JDK8 + FX 必须带 ant-javafx.jar & javapackager
          test -f "$JAVA_HOME/lib/ant-javafx.jar" && echo "ant-javafx.jar OK" || { echo "ant-javafx.jar MISSING"; exit 1; }
          test -x "$JAVA_HOME/bin/javapackager" && "$JAVA_HOME/bin/javapackager" -version || { echo "javapackager MISSING"; exit 1; }
      
      # 明确探测并验证打包用的 runtime，并导出为 PACKAGER_RUNTIME
      - name: Check JRE/JDK runtime for packager (macOS)
        if: runner.os == 'macOS'
        shell: bash
        run: |
          set -euo pipefail
          echo "== Inspect JAVA_HOME =="
          echo "JAVA_HOME=$JAVA_HOME"
          ls -la "$JAVA_HOME" || true
          echo "== Probe JAVA_HOME layout =="
          # 常见候选：优先用 $JAVA_HOME/jre（JDK8 下存在）；否则用 $JAVA_HOME
          CANDIDATES=()
          if [ -d "$JAVA_HOME/jre" ]; then CANDIDATES+=("$JAVA_HOME/jre"); fi
          CANDIDATES+=("$JAVA_HOME")
      
          PICK=""
          for d in "${CANDIDATES[@]}"; do
            echo "-- probing $d"
            # 要求：存在 bin/java（runtime）或 Contents/Home/bin/java（bundle），以及核心库目录
            if [ -x "$d/bin/java" ] || [ -x "$d/Contents/Home/bin/java" ]; then
              # JDK8 打包器还会检查一些传统文件/目录
              if [ -d "$d/lib" ] || [ -d "$d/jre/lib" ] || [ -d "$d/Contents/Home/lib" ]; then
                PICK="$d"
                break
              fi
            fi
          done
      
          if [ -z "$PICK" ]; then
            echo "✘ No usable runtime directory found for packager."
            echo "Dump JAVA_HOME tree (depth 2) to help diagnose:"
            find "$JAVA_HOME" -maxdepth 2 -type d -print
            exit 1
          fi
      
          echo "✔ Selected runtime for packager: $PICK"
      
          echo "== Sanity check on selected runtime =="
          if [ -x "$PICK/bin/java" ]; then "$PICK/bin/java" -version; fi
          if [ -x "$PICK/Contents/Home/bin/java" ]; then "$PICK/Contents/Home/bin/java" -version; fi
      
          echo "== List key files =="
          ls -la "$PICK/bin" || true
          # JDK8 with FX 通常还会有 jfxrt.jar（随发行版不同，不一定必须）
          find "$PICK" -maxdepth 3 -type f \( -name "jfxrt.jar" -o -name "libjfx*.dylib" \) -print || true
      
          # 导出给后续步骤使用
          echo "PACKAGER_RUNTIME=$PICK" >> "$GITHUB_ENV"
      
      # 用插件打 DMG/PKG；失败就回退到 CLI；仍失败则报错
      - name: Build DMG/PKG (macOS)
        if: runner.os == 'macOS'
        shell: bash
        env:
          PACKAGER_RUNTIME: ${{ env.PACKAGER_RUNTIME }}
        run: |
          set -euo pipefail
          echo "PACKAGER_RUNTIME=${PACKAGER_RUNTIME:-<unset>}"
      
          echo "== Show jfx appdir inputs =="
          ls -la target/jfx/app || true
          find target/jfx/app -maxdepth 2 -type f -name "*-jfx.jar" -print || true
      
          echo "== Try via javafx-maven-plugin with -Djre =="
          # 关键：插件直接吃 -Djre=...
          if ! mvn -s "$HOME/.m2/settings.xml" $MAVEN_FLAGS \
            -DskipTests -Dmaven.test.skip=true -Dtest.skip=true \
            -DmainClass="${APP_MAIN}" \
            -DappName="${APP_NAME}" \
            -Dvendor="${APP_VENDOR}" \
            -Didentifier="org.datavyu" \
            -Dverbose=true \
            -Dbundler="DMG Installer,PKG Installer,Mac Application Image" \
            -Djre="${PACKAGER_RUNTIME}" \
            jfx:native ; then
            echo "Plugin path failed, will fallback to javapackager CLI..."
          fi
      
          echo "== produced DMG/PKG after plugin =="
          if find target -maxdepth 6 -type f \( -name "*.dmg" -o -name "*.pkg" \) | grep -q . ; then
            echo "✔ DMG/PKG produced by plugin"
          else
            echo "No DMG/PKG produced by plugin. Fallback to javapackager CLI ..."
            APPDIR="target/jfx/app"
            JFXJAR=$(find "$APPDIR"/Datavyu -maxdepth 1 -name "*-jfx.jar" | head -n1 || true)
            if [ -z "$JFXJAR" ]; then
              echo "✘ Cannot find *-jfx.jar under $APPDIR/Datavyu"; exit 1
            fi
      
            mkdir -p target/packager
            # CLI 需要 -Bruntime=...；优先给出你选中的 runtime
            "$JAVA_HOME/bin/javapackager" -deploy \
              -native dmg \
              -name "${APP_NAME}" \
              -appclass "${APP_MAIN}" \
              -srcdir "$(dirname "$JFXJAR")" \
              -srcfiles "$(basename "$JFXJAR")" \
              -outdir target/packager \
              -outfile "${APP_NAME}" \
              -Bidentifier=org.datavyu \
              -Bmac.sign=false \
              -Bruntime="${PACKAGER_RUNTIME}"
      
            # 收集到 target 根目录便于上传
            find target/packager -type f \( -name "*.dmg" -o -name "*.pkg" \) -exec cp {} target/ \; || true
          fi
      
          echo "== FINAL DMG/PKG =="
          if ! find target -maxdepth 6 -type f \( -name "*.dmg" -o -name "*.pkg" \) -print | tee /dev/stderr | grep -q . ; then
            echo "✘ Still no DMG/PKG produced. Failing the build."
            echo "== DEBUG: dump PACKAGER_RUNTIME structure (depth 3) =="
            find "${PACKAGER_RUNTIME}" -maxdepth 3 -print || true
            exit 1
          fi


      # ============================== Windows: 产出 EXE/MSI ==============================
      - name: Build EXE/MSI (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $ErrorActionPreference = "Stop"
          mvn $env:MAVEN_FLAGS `
            -DskipTests -Dmaven.test.skip=true -Dtest.skip=true `
            -Djfx.native=true `
            -Djfx.native.bundlers="EXE Installer,MSI Installer" `
            -Djavafx.mainClass="$env:APP_MAIN" `
            -Djavafx.appName="$env:APP_NAME" `
            -Djavafx.vendor="$env:APP_VENDOR" `
            -Djavafx.verbose=true `
            jfx:native

          Write-Host "== produced EXE/MSI =="
          $files = Get-ChildItem -Recurse -Path target -Include *.exe,*.msi -ErrorAction SilentlyContinue
          if (-not $files) {
            Write-Error "No EXE/MSI produced. Failing the build."
          } else {
            $files | ForEach-Object { $_.FullName }
          }

      # ============================== 产物检查与打包上传 ==============================
      - name: Inspect outputs
        if: always()
        shell: bash
        run: |
          echo "== files ==" && find target -maxdepth 6 -type f -print || true
          echo "== app bundles ==" && find target -maxdepth 6 -type d -name "*.app" -print || true

      # 兜底：总是打一个 appdir.zip，便于手动运行/排错
      - name: Package jfx appdir (always)
        if: always()
        shell: bash
        run: |
          if [ -d target/jfx/app ]; then
            (cd target/jfx/app && zip -r ../../${{ env.APP_NAME }}-${{ runner.os }}-appdir.zip .)
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: datavyu-${{ runner.os }}
          path: |
            target/**/*.dmg
            target/**/*.pkg
            target/**/*.msi
            target/**/*.exe
            target/*-appdir.zip
            target/**/*.app.zip
            target/jfx/native/**/*
            target/jfx/app/*-jfx.jar
            target/*-jfx.jar
          if-no-files-found: warn
