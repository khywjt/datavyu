name: Build Datavyu (Windows only)

on:
  push:
    branches: [ main, master ]
  pull_request:

jobs:
  build-win:
    runs-on: windows-latest

    env:
      MAVEN_FLAGS: "-B -ntp"
      MAVEN_OPTS: >-
        -Xmx2g
        -Dfile.encoding=UTF-8
        -Dswing.aatext=true
        -Dawt.useSystemAAFontSettings=lcd
        -Dorg.apache.maven.wagon.httpconnectionManager.ttl=120000
        -Dorg.apache.maven.wagon.http.retryHandler.count=2
      APP_MAIN: "org.datavyu.Datavyu"
      APP_NAME: "Datavyu"
      APP_VENDOR: "Datavyu"

    steps:
      - uses: actions/checkout@v4

      # ===== JDK8 + JavaFX (含 javapackager) =====
      - name: Set up JDK 8 (Liberica with JavaFX)
        uses: actions/setup-java@v4
        with:
          distribution: liberica
          java-version: '8'
          java-package: jdk+fx
          cache: maven

      - name: Verify JavaFX packager tools
        shell: pwsh
        run: |
          Write-Host "JAVA_HOME=$env:JAVA_HOME"
          & "$env:JAVA_HOME\bin\java.exe" -version
          if (Test-Path "$env:JAVA_HOME\bin\javapackager.exe") {
            & "$env:JAVA_HOME\bin\javapackager.exe" -version
          } else {
            Write-Warning "javapackager.exe not found (Liberica 8 + FX should include it)."
          }
          if (Test-Path "$env:JAVA_HOME\lib\ant-javafx.jar") {
            Write-Host "ant-javafx.jar OK"
          }

      # ===== Windows 打包工具 =====
      - name: Install Windows packaging tools (InnoSetup + WiX)
        shell: pwsh
        run: |
          choco install -y innosetup wixtoolset

      # ===== Maven mirrors（可按需调整或删除）=====
      - name: Set up Maven mirrors
        shell: pwsh
        run: |
          New-Item -Force -ItemType Directory "$HOME\.m2" | Out-Null
          @"
          <settings xmlns="http://maven.apache.org/SETTINGS/1.0.0"
                    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                    xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0 https://maven.apache.org/xsd/settings-1.0.0.xsd">
            <mirrors>
              <mirror>
                <id>aliyun-central</id>
                <mirrorOf>central,!apache-central</mirrorOf>
                <url>https://maven.aliyun.com/repository/central</url>
              </mirror>
              <mirror>
                <id>fast-fail-others</id>
                <mirrorOf>rubygems-releases,bintray-datavyu-datavyu</mirrorOf>
                <url>https://repo.maven.apache.org/maven2</url>
              </mirror>
            </mirrors>
            <profiles>
              <profile>
                <id>extra-repos</id>
                <activation><activeByDefault>true</activeByDefault></activation>
                <repositories>
                  <repository>
                    <id>apache-central</id>
                    <url>https://repo.maven.apache.org/maven2</url>
                    <releases><enabled>true</enabled><updatePolicy>never</updatePolicy></releases>
                    <snapshots><enabled>false</enabled></snapshots>
                  </repository>
                </repositories>
              </profile>
            </profiles>
          </settings>
          "@ | Set-Content -Encoding UTF8 "$HOME\.m2\settings.xml"

      # ===== 预装 vendor JAR（可选，用于 sdl/ffmpeg 本地 JAR）=====
      - name: Preinstall vendor jars (optional)
        shell: pwsh
        run: |
          $classifier = "win"
          $vendorJars = @(
            "vendor\sdl-libs-2.0.9-$classifier.jar",
            "vendor\ffmpeg-libs-4.1.1-$classifier.jar",
            "vendor\ffmpeg-plugin-0.24-$classifier.jar"
          )
          foreach ($f in $vendorJars) {
            if (Test-Path $f) {
              $bn = [System.IO.Path]::GetFileName($f)
              $aid = $bn -replace '-[0-9].*',''
              if ($bn -match '.*-([0-9][^\.]*(\.[0-9]+)*)[^\\]*\.jar') { $ver = $Matches[1] } else { continue }
              mvn -s "$HOME\.m2\settings.xml" -B install:install-file `
                -Dfile="$f" -DgroupId=org.datavyu -DartifactId="$aid" `
                -Dversion="$ver" -Dpackaging=jar -Dclassifier="$classifier"
            }
          }

      # ===== 为基于路径的测试准备资源 =====
      - name: Prepare test resources for file-path based tests
        shell: pwsh
        run: |
          if (Test-Path "IO") { Remove-Item -Recurse -Force "IO" }
          if (Test-Path "src\test\resources\IO") {
            New-Item -ItemType Directory -Force "IO" | Out-Null
            Copy-Item -Recurse "src\test\resources\IO\*" "IO\"
          } else {
            Write-Error "src/test/resources/IO not found"; exit 1
          }

      # ===== 单元测试（尽量运行，但不阻断打包；可按需去掉 continue-on-error）=====
      - name: Run unit tests (best effort)
        shell: pwsh
        continue-on-error: true
        run: |
          # 如需完全跳过测试，改为： mvn -s "$HOME\.m2\settings.xml" $env:MAVEN_FLAGS -U -DskipTests test
          mvn -s "$HOME\.m2\settings.xml" $env:MAVEN_FLAGS -U test

      - name: Upload surefire reports (on test failure)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: surefire-reports-windows
          path: |
            **/target/surefire-reports/**
            **/target/*.dump*
            **/target/*-jvmRun*.dump*
          if-no-files-found: ignore

      # ===== 先产出 JavaFX appdir（跳过测试）=====
      - name: Build appdir (skip tests)
        shell: pwsh
        run: |
          mvn -s "$HOME\.m2\settings.xml" $env:MAVEN_FLAGS `
            -DskipTests -Dmaven.test.skip=true -Dtest.skip=true `
            -U clean jfx:jar

      # ===== Windows：产出 EXE/MSI =====
      - name: Build EXE/MSI (Windows)
        shell: pwsh
        run: |
          $ErrorActionPreference = "Stop"
          mvn -s "$HOME\.m2\settings.xml" $env:MAVEN_FLAGS `
            -DskipTests -Dmaven.test.skip=true -Dtest.skip=true `
            -Djfx.native=true `
            -Djfx.native.bundlers="EXE Installer,MSI Installer" `
            -Djavafx.mainClass="$env:APP_MAIN" `
            -Djavafx.appName="$env:APP_NAME" `
            -Djavafx.vendor="$env:APP_VENDOR" `
            -Djavafx.verbose=true `
            jfx:native

          Write-Host "== produced EXE/MSI =="
          $files = Get-ChildItem -Recurse -Path target -Include *.exe,*.msi -ErrorAction SilentlyContinue
          if (-not $files) { Write-Error "No EXE/MSI produced. Failing the build." } else { $files | ForEach-Object { $_.FullName } }

      # ===== 打包 appdir 以便调试 =====
      - name: Package jfx appdir (always)
        if: always()
        shell: pwsh
        run: |
          if (Test-Path "target\jfx\app") {
            if (Test-Path "target\${env:APP_NAME}-Windows-appdir.zip") { Remove-Item "target\${env:APP_NAME}-Windows-appdir.zip" -Force }
            Compress-Archive -Path "target\jfx\app\*" -DestinationPath "target\${env:APP_NAME}-Windows-appdir.zip"
          }

      # ===== 上传产物 =====
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: datavyu-windows
          path: |
            target/**/*.msi
            target/**/*.exe
            target/*-Windows-appdir.zip
            target/jfx/native/**/*
            target/jfx/app/*-jfx.jar
            target/*-jfx.jar
          if-no-files-found: warn
